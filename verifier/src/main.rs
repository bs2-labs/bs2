#![no_std]
#![no_main]
#![feature(lang_items)]
#![feature(alloc_error_handler)]
#![feature(panic_info_message)]

#[cfg(test)]
extern crate alloc;

use core::slice::SlicePattern;

#[cfg(not(test))]
use ckb_std::default_alloc;
#[cfg(not(test))]
ckb_std::entry!(program_entry);
#[cfg(not(test))]
default_alloc!();

use alloc::{format, vec::Vec};
use circuits::main_circuit::MainCircuit;

use ckb_std::{
    ckb_constants::Source,
    syscalls::{debug, load_witness},
};
use halo2_gadgets::halo2curves::bn256::{Bn256, Fr, G1Affine};

use halo2_proofs::{
    helpers::SerdeCurveAffine,
    plonk::{verify_proof, VerifyingKey},
    poly::kzg::{
        commitment::{KZGCommitmentScheme, ParamsKZG, ParamsVerifierKZG},
        multiopen::VerifierSHPLONK,
        strategy::SingleStrategy,
    },
    transcript::{Blake2bRead, Challenge255, TranscriptReadBuffer},
    SerdeFormat,
};
use halo2curves::{io, pairing::Engine};

pub fn read_verifier_params<E: Engine, R: io::Read>(
    reader: &mut R,
) -> io::Result<ParamsVerifierKZG<E>>
where
    E::G1Affine: SerdeCurveAffine,
    E::G2Affine: SerdeCurveAffine,
{
    const SHRINK_K: u32 = 1;
    let shrink_k = SHRINK_K;
    let mut k = [0u8; 4];
    reader.read_exact(&mut k[..])?;
    let k = u32::from_le_bytes(k);
    let n = 1 << k;
    let shrink_n = 1 << shrink_k;

    let format = SerdeFormat::RawBytes;

    let g = (0..shrink_n)
        .map(|_| E::G1Affine::read(reader, format))
        .collect::<Result<Vec<_>, _>>()?;
    let g_lagrange = (0..shrink_n)
        .map(|_| E::G1Affine::read(reader, format))
        .collect::<Result<Vec<_>, _>>()?;

    let g2 = E::G2Affine::read(reader, format)?;
    let s_g2 = E::G2Affine::read(reader, format)?;

    Ok(ParamsVerifierKZG {
        k,
        n: n as u64,
        g,
        g_lagrange,
        g2,
        s_g2,
    })
}

pub fn program_entry() -> i8 {
    let verifier_param_buffer = [
        0x0e, 0x00, 0x00, 0x00, 0x9d, 0x0d, 0x8f, 0xc5, 0x8d, 0x43, 0x5d, 0xd3, 0x3d, 0x0b, 0xc7,
        0xf5, 0x28, 0xeb, 0x78, 0x0a, 0x2c, 0x46, 0x79, 0x78, 0x6f, 0xa3, 0x6e, 0x66, 0x2f, 0xdf,
        0x07, 0x9a, 0xc1, 0x77, 0x0a, 0x0e, 0x3a, 0x1b, 0x1e, 0x8b, 0x1b, 0x87, 0xba, 0xa6, 0x7b,
        0x16, 0x8e, 0xeb, 0x51, 0xd6, 0xf1, 0x14, 0x58, 0x8c, 0xf2, 0xf0, 0xde, 0x46, 0xdd, 0xcc,
        0x5e, 0xbe, 0x0f, 0x34, 0x83, 0xef, 0x14, 0x1c, 0x17, 0x76, 0x09, 0x3d, 0x82, 0xf5, 0xcc,
        0xb8, 0x20, 0x5c, 0x6c, 0x54, 0xa9, 0x35, 0xee, 0x95, 0xc4, 0x1d, 0xc3, 0x8e, 0x75, 0x56,
        0x12, 0x4d, 0xf9, 0x7e, 0xcc, 0x5f, 0x02, 0x5d, 0x83, 0x24, 0xf7, 0x4c, 0xe0, 0xcd, 0xa9,
        0xf4, 0x73, 0xf4, 0x13, 0x0e, 0x4b, 0x20, 0x11, 0x5e, 0x61, 0x2e, 0xed, 0xfc, 0x29, 0xdb,
        0x5c, 0x0c, 0x94, 0x75, 0x04, 0x6d, 0xa1, 0x1f, 0xf5, 0x16, 0x87, 0x1f, 0x78, 0x3e, 0xe6,
        0x8b, 0xe5, 0xb3, 0x13, 0x8d, 0xa1, 0xe4, 0xca, 0x9d, 0x96, 0x9a, 0x26, 0xbb, 0x09, 0x83,
        0xaf, 0xa9, 0xfc, 0xc2, 0xdb, 0xda, 0x13, 0xb4, 0x08, 0x1e, 0x2e, 0xef, 0x5e, 0x1c, 0x22,
        0x83, 0x9b, 0x1a, 0x64, 0xbf, 0xe5, 0xcb, 0x7f, 0xcd, 0x38, 0xfa, 0x52, 0x8e, 0xe1, 0xdd,
        0xcc, 0x28, 0x38, 0x74, 0xf7, 0xe1, 0x6e, 0x53, 0x49, 0x69, 0xf5, 0x41, 0xcf, 0x7b, 0xf2,
        0x18, 0x47, 0xe4, 0x22, 0x80, 0x3b, 0xe4, 0x6b, 0x44, 0x36, 0xbc, 0x2b, 0x2a, 0x83, 0xe6,
        0xc6, 0xf2, 0x19, 0x90, 0x76, 0xf6, 0xd3, 0x8b, 0xb7, 0x28, 0x40, 0x24, 0xe1, 0x7d, 0xca,
        0x67, 0xa5, 0x27, 0x02, 0x43, 0x9c, 0x84, 0x91, 0xdb, 0xb1, 0x82, 0x2f, 0xfb, 0xff, 0x2e,
        0x97, 0xdd, 0xdc, 0xda, 0x55, 0xcb, 0xdf, 0x45, 0xdd, 0x1e, 0x43, 0x55, 0xe9, 0xd0, 0x61,
        0x97, 0x98, 0x17, 0x75, 0x20, 0x26, 0x20, 0xbc, 0x02, 0xd1, 0xb5, 0x83, 0x8e, 0x72, 0x01,
        0x7b, 0x49, 0x35, 0x19, 0xeb, 0xdc, 0xdf, 0x1a, 0x81, 0x97, 0x47, 0x26, 0xb8, 0xfb, 0x3b,
        0x50, 0x96, 0xaf, 0x41, 0x38, 0x57, 0x19, 0x40, 0x61, 0x4c, 0xa8, 0x7d, 0x73, 0xb4, 0xaf,
        0xc4, 0xd8, 0x02, 0x58, 0x5a, 0xdd, 0x43, 0x60, 0x86, 0x2f, 0xa0, 0x52, 0xfc, 0x50, 0xe9,
        0x09, 0x6b, 0x7b, 0xea, 0x3a, 0x83, 0xf0, 0xfe, 0x14, 0xf6, 0xe9, 0x6b, 0x88, 0x9d, 0xfa,
        0x9d, 0x61, 0x78, 0x9b, 0x9e, 0xf5, 0x97, 0xd2, 0x7f, 0xfe, 0xfe, 0x7d, 0x1b, 0x23, 0x62,
        0x1a, 0x9e, 0xff, 0x06, 0x42, 0x9e, 0xae, 0xeb, 0x7e, 0xfd, 0x28, 0xee, 0x56, 0x18, 0xc7,
        0x56, 0x5b, 0x09, 0x64, 0xbb, 0x3c, 0x7d, 0x32, 0x22, 0xf9, 0x57, 0xdc, 0x76, 0x10, 0x35,
        0x33, 0xbe, 0x35, 0xf9, 0x55, 0x82, 0x64, 0xfd, 0x93, 0xe6, 0xa0, 0xa4, 0x0d, 0xdb, 0x8c,
        0xe3, 0x1d, 0x5f, 0x50, 0xac, 0x25, 0xfd, 0x67, 0x78, 0xc9, 0x46, 0x95, 0x4f, 0x36, 0xd1,
        0xe0, 0xcf, 0x16, 0xaa, 0x8b, 0x5e, 0xe6, 0x8e, 0x32, 0x74, 0x62, 0x40, 0x7e, 0x8a, 0x29,
        0x35, 0x2a, 0x3e, 0xf5, 0xd4, 0x26, 0x8b, 0xfc, 0xe6, 0xaa, 0xbc, 0x05, 0x5c, 0x53, 0xde,
        0xf7, 0x23, 0x78, 0x7d, 0x96, 0x1a, 0xdc, 0x25, 0x89, 0x5f, 0x39, 0x4c, 0x96, 0x4d, 0x47,
        0x97, 0x21, 0xd4, 0xae, 0x99, 0x54, 0x2a, 0x30, 0xee, 0x7c, 0xf8, 0x9a, 0x58, 0x6f, 0xdc,
        0x90, 0x16, 0x14, 0x93, 0xef, 0x60, 0x33, 0xe2, 0xed, 0xb6, 0xa1, 0x86, 0xa2, 0x4e, 0x7b,
        0x29, 0x46, 0x9b, 0x2a, 0x05, 0xa3, 0x9d, 0xa2, 0x5b, 0xd9, 0xa3, 0x31, 0x34, 0x17, 0x62,
        0xe1, 0x2d, 0x3a, 0xcc, 0xd7, 0xe0, 0x32, 0x7b, 0xef, 0x49, 0x3b, 0x69, 0xac, 0x7a, 0x2c,
        0xb0, 0x3e, 0x33, 0x42, 0x72, 0x0b,
    ];
    let verifier_param_len = verifier_param_buffer.len();
    let proof_buffer = [
        0x66, 0x23, 0x0b, 0x9c, 0x1c, 0x36, 0x4f, 0x61, 0x1d, 0x43, 0x15, 0x6b, 0x27, 0x83, 0xe5,
        0x78, 0x3b, 0x02, 0x59, 0x58, 0x92, 0x73, 0x17, 0x6e, 0x67, 0x6d, 0x02, 0xe8, 0xd1, 0x2b,
        0x87, 0x87, 0x12, 0x9c, 0x00, 0xbc, 0x43, 0xc0, 0x61, 0xa0, 0x6f, 0x5a, 0x41, 0xbd, 0x7f,
        0x48, 0x49, 0x5f, 0x65, 0x6e, 0x6d, 0x83, 0x32, 0x82, 0xfe, 0x74, 0x0c, 0x2d, 0x7a, 0xe2,
        0x98, 0xf2, 0x1a, 0x9c, 0x10, 0xfa, 0xd9, 0x68, 0xd1, 0xe1, 0x62, 0xd8, 0x72, 0x5e, 0xa8,
        0x76, 0xd3, 0x62, 0x3e, 0xff, 0x36, 0x71, 0x1c, 0x2c, 0xc8, 0x84, 0x69, 0xc3, 0x3b, 0x2e,
        0xe8, 0x41, 0x47, 0xf5, 0xa5, 0x12, 0xb6, 0xca, 0xec, 0x61, 0xff, 0x99, 0x73, 0xdc, 0x6d,
        0x63, 0x86, 0x56, 0xac, 0xd0, 0x31, 0x43, 0x73, 0xce, 0x20, 0x70, 0xe6, 0x22, 0x45, 0xc1,
        0xad, 0xab, 0x58, 0xe9, 0x61, 0x92, 0x46, 0xad, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x6c, 0xd3, 0x40, 0xc0,
        0xcf, 0x13, 0xd1, 0xd3, 0x52, 0xec, 0x30, 0x14, 0x30, 0x5d, 0xe6, 0xc8, 0xc1, 0xdd, 0x07,
        0x5b, 0x8e, 0xf0, 0x4d, 0x73, 0x99, 0x3c, 0x60, 0x65, 0x72, 0x22, 0x2d, 0xfa, 0xc7, 0xc8,
        0xe3, 0x03, 0xd0, 0x26, 0x62, 0x6a, 0x9d, 0x94, 0xc4, 0xdb, 0xe8, 0xfc, 0xcb, 0x62, 0x60,
        0xd2, 0x11, 0xaf, 0xb3, 0xb8, 0x9f, 0x86, 0x6a, 0x21, 0x2d, 0x7a, 0xab, 0x82, 0xae, 0x0a,
        0xf0, 0xf0, 0x08, 0xfc, 0x03, 0xf1, 0x0e, 0x74, 0xbb, 0xef, 0xc5, 0x52, 0xb9, 0x7f, 0x78,
        0xe6, 0xef, 0x3d, 0xd7, 0x85, 0xa4, 0xa8, 0xa7, 0x18, 0x5c, 0x68, 0xc6, 0x9d, 0xd8, 0x38,
        0x0e, 0x14, 0x23, 0x03, 0x52, 0x0d, 0x73, 0x8e, 0xb6, 0x69, 0x01, 0x2d, 0x97, 0xa9, 0x10,
        0xb9, 0x30, 0xf0, 0x68, 0x17, 0xb4, 0xa4, 0x26, 0xd7, 0xb2, 0xa9, 0x71, 0xe1, 0x89, 0xed,
        0x38, 0x38, 0x05, 0x16, 0x80, 0xcf, 0x61, 0x12, 0x1a, 0xb2, 0x93, 0xf9, 0xf4, 0x74, 0x74,
        0x2e, 0x8d, 0xc9, 0xd3, 0x1b, 0x49, 0x5c, 0xd0, 0x41, 0xd3, 0x8a, 0x67, 0x3f, 0x56, 0x9c,
        0xf2, 0xb1, 0xe2, 0x9a, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xa6,
        0xa0, 0xb8, 0x20, 0x19, 0xf0, 0x00, 0x87, 0xfd, 0xe4, 0x13, 0x69, 0x82, 0x87, 0x3f, 0x7a,
        0xfe, 0x58, 0x1c, 0xb6, 0x99, 0xb8, 0xa8, 0x5f, 0xf3, 0x23, 0xec, 0xa0, 0x26, 0xe0, 0x0c,
        0xcc, 0xbf, 0x46, 0xff, 0x94, 0xb8, 0x2d, 0xbc, 0x45, 0xb7, 0xa9, 0x8a, 0xb9, 0xfc, 0x79,
        0xec, 0x87, 0xb8, 0x60, 0x63, 0x6e, 0x21, 0xab, 0xd4, 0x0d, 0x67, 0x29, 0x7b, 0x76, 0x73,
        0x89, 0x12, 0xf0, 0x43, 0x13, 0xff, 0x6c, 0x2d, 0x30, 0x53, 0xc1, 0x86, 0x61, 0xe4, 0xe7,
        0xd3, 0x56, 0x13, 0x31, 0xb5, 0x9d, 0x6a, 0xc7, 0x98, 0xd1, 0x58, 0x96, 0x53, 0xff, 0x3a,
        0xde, 0xb8, 0xf9, 0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2a, 0xe0, 0x8c, 0x02, 0x24, 0xc7, 0x0d, 0x94,
        0x46, 0x1d, 0xbe, 0x53, 0xfd, 0x41, 0x2a, 0xb7, 0x5d, 0x85, 0x75, 0x3f, 0x1b, 0x5a, 0x01,
        0xee, 0x7a, 0x15, 0x57, 0xca, 0xee, 0x98, 0x08, 0x61, 0x8f, 0x34, 0x34, 0x7d, 0xa2, 0xf3,
        0x0f, 0x30, 0xbc, 0x9f, 0x2a, 0x57, 0x67, 0xb7, 0x4e, 0x19, 0x9f, 0xf0, 0x69, 0xfb, 0x8f,
        0x1a, 0x5c, 0x66, 0xd5, 0x89, 0x0c, 0xcd, 0x69, 0x7c, 0x2c, 0xb6, 0x8f, 0xe3, 0xc4, 0xa8,
        0x15, 0x6d, 0x49, 0xdd, 0xaf, 0x0f, 0xe6, 0x97, 0x05, 0x90, 0xb0, 0x4a, 0xdd, 0x7a, 0x80,
        0x6a, 0xbf, 0xb6, 0x45, 0x43, 0x13, 0xc6, 0xd8, 0x10, 0x77, 0xee, 0x23, 0x5a, 0xaa, 0x2c,
        0xa8, 0x90, 0x61, 0x5e, 0x92, 0x07, 0x98, 0x29, 0xb5, 0x12, 0x0c, 0xd6, 0x9f, 0xf9, 0x2f,
        0x5b, 0xe2, 0x9e, 0xa8, 0x7e, 0x88, 0x2c, 0xc1, 0x2b, 0x50, 0xcd, 0xb3, 0x8d, 0x18, 0x8e,
        0x02, 0xf8, 0xf9, 0xdb, 0x2c, 0x59, 0x3a, 0x28, 0x55, 0x29, 0x82, 0x33, 0xe4, 0xec, 0x76,
        0xdb, 0x59, 0x03, 0x8f, 0x27, 0x2c, 0xf2, 0x50, 0x80, 0x19, 0xff, 0x73, 0x6c, 0x2b, 0x9d,
        0x09, 0x8c, 0xb6, 0x60, 0xec, 0xf6, 0x05, 0x8f, 0x0c, 0x6d, 0x31, 0x42, 0x94, 0xe3, 0xbb,
        0xac, 0x98, 0x8c, 0x4a, 0xcd, 0xa9, 0xa8, 0x24, 0xc7, 0x03, 0x9f, 0x2e, 0xdd, 0xc6, 0xc3,
        0x78, 0x12, 0x0b, 0xc1, 0xba, 0x43, 0xeb, 0x96, 0x26, 0x3f, 0xd0, 0x32, 0x02, 0xd6, 0x23,
        0xc5, 0x61, 0x20, 0x5c, 0x00, 0x32, 0x8f, 0xf1, 0xe5, 0x2e, 0xce, 0x1c, 0x9b, 0xaa, 0xff,
        0xc4, 0x3e, 0xeb, 0xb2, 0x13, 0x35, 0xfd, 0xc3, 0xac, 0x03, 0x69, 0xf5, 0x0d, 0xda, 0x0a,
        0xc6, 0xa5, 0xc5, 0x34, 0xf6, 0xec, 0xba, 0x8b, 0x7c, 0xc3, 0x84, 0x3d, 0xbc, 0xb3, 0xba,
        0x75, 0x53, 0xf9, 0xd8, 0x1d, 0xfa, 0x19, 0x28, 0xd5, 0x14, 0xa8, 0x35, 0xef, 0x1b, 0x4f,
        0x4e, 0xb6, 0x5c, 0x19, 0xb0, 0x8a, 0x0a, 0xe0, 0x72, 0xba, 0xd1, 0x21, 0x36, 0x1e, 0x5a,
        0xb7, 0x91, 0x34, 0x37, 0x56, 0x0a, 0xf4, 0x29, 0x9f,
    ];
    let proof_len = proof_buffer.len();

    let vk_bytes = [
        0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x50, 0xd8, 0x37, 0x42, 0x73,
        0x44, 0x09, 0x09, 0xd4, 0xea, 0xa9, 0xe6, 0x2d, 0x64, 0x64, 0x67, 0x0d, 0x1f, 0x9a, 0x0c,
        0x18, 0x09, 0xdf, 0x85, 0xba, 0xf9, 0xb5, 0xe2, 0xf1, 0x46, 0x2c, 0x9f, 0x66, 0x8a, 0x39,
        0x1a, 0x18, 0xb3, 0x57, 0x5c, 0x90, 0x97, 0x5a, 0xd7, 0x49, 0x00, 0x80, 0x15, 0xc9, 0xb0,
        0x35, 0xde, 0xe1, 0xeb, 0xa4, 0x5b, 0xd9, 0x33, 0x3b, 0x46, 0x5a, 0xdd, 0x23, 0xf5, 0xbf,
        0xac, 0x70, 0x44, 0x9f, 0x33, 0x39, 0x20, 0x92, 0x4e, 0x84, 0x1a, 0xde, 0x7f, 0xfa, 0xa5,
        0xf8, 0x19, 0x65, 0xf3, 0x3f, 0xbb, 0xf4, 0xea, 0x6e, 0xc6, 0x22, 0x36, 0x34, 0xc2, 0x19,
        0x8c, 0xa9, 0x7b, 0xdc, 0x56, 0x51, 0xb5, 0x99, 0x0f, 0xf4, 0xc7, 0xa2, 0xed, 0xb6, 0x85,
        0x86, 0xc0, 0x8d, 0x06, 0x62, 0x06, 0x81, 0xe5, 0x4b, 0x59, 0x11, 0x48, 0xa5, 0x80, 0x9d,
        0x2f, 0x21, 0x88, 0xa9, 0xd8, 0x9e, 0x9d, 0xc7, 0x05, 0xed, 0x77, 0xc0, 0xb7, 0x4f, 0x68,
        0x3d, 0xda, 0xb0, 0x13, 0x98, 0x1f, 0xec, 0xf0, 0xf5, 0x85, 0x29, 0xec, 0x0d, 0xbb, 0x5e,
        0x74, 0xc8, 0x95, 0x17, 0x60, 0x24, 0x62, 0xa0, 0xe7, 0x77, 0xd5, 0x41, 0x00, 0x47, 0xe8,
        0x1c, 0xef, 0x12, 0x2f, 0x65, 0xae, 0x43, 0xe0, 0x96, 0x5d, 0xc4, 0x41, 0x3d, 0xa9, 0x19,
        0xfa, 0x01, 0xff, 0xbc, 0x3e, 0x24, 0x17, 0x76, 0x09, 0x3d, 0x82, 0xf5, 0xcc, 0xb8, 0x20,
        0x5c, 0x6c, 0x54, 0xa9, 0x35, 0xee, 0x95, 0xc4, 0x1d, 0xc3, 0x8e, 0x75, 0x56, 0x12, 0x4d,
        0xf9, 0x7e, 0xcc, 0x5f, 0x02, 0x5d, 0x83, 0x24, 0xf7, 0x4c, 0xe0, 0xcd, 0xa9, 0xf4, 0x73,
        0xf4, 0x13, 0x0e, 0x4b, 0x20, 0x11, 0x5e, 0x61, 0x2e, 0xed, 0xfc, 0x29, 0xdb, 0x5c, 0x0c,
        0x94, 0x75, 0x04, 0x6d, 0xa1, 0x1f, 0xf5, 0x16, 0x87, 0x1f, 0xda, 0xb7, 0x53, 0x82, 0xa3,
        0x30, 0xb5, 0xf0, 0xf8, 0x1b, 0x1a, 0x2f, 0x66, 0xd7, 0x7e, 0x42, 0x1d, 0x34, 0xca, 0xc3,
        0x2a, 0x6e, 0x1b, 0x79, 0xd3, 0x60, 0x9a, 0x53, 0xb0, 0x13, 0x86, 0x25, 0x84, 0xb8, 0x7d,
        0x04, 0x92, 0xa0, 0x61, 0x0c, 0xc8, 0x9c, 0xf1, 0x41, 0x5f, 0xcb, 0x75, 0x9c, 0xd7, 0x37,
        0x4d, 0x93, 0xa3, 0xd1, 0x11, 0x58, 0x2b, 0x18, 0x98, 0x7b, 0x5f, 0x33, 0x8c, 0x23, 0x00,
        0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x02,
        0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x00,
        0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x06, 0x08, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x00, 0xf6, 0xff, 0xff, 0x9f, 0x38, 0x68, 0x2c, 0x59, 0x53, 0x9a, 0xc1, 0x3e,
        0x2b, 0xed, 0xf8, 0x6d, 0x5c, 0x8c, 0xf2, 0xf0, 0xde, 0x46, 0xdd, 0xcc, 0x5e, 0xbe, 0x0f,
        0x34, 0x83, 0xef, 0x14, 0x1c, 0x06, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x08, 0x02, 0x00,
        0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0xfb, 0xff,
        0xff, 0x4f, 0x1c, 0x34, 0x96, 0xac, 0x29, 0xcd, 0x60, 0x9f, 0x95, 0x76, 0xfc, 0x36, 0x2e,
        0x46, 0x79, 0x78, 0x6f, 0xa3, 0x6e, 0x66, 0x2f, 0xdf, 0x07, 0x9a, 0xc1, 0x77, 0x0a, 0x0e,
        0x06, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    let verifier_params = {
        let r: io::Result<ParamsVerifierKZG<Bn256>> =
            read_verifier_params(&mut &verifier_param_buffer[..verifier_param_len]);
        if r.is_err() {
            debug(format!(
                "Error on ParamsVerifierKZG::<Bn256>::read: {:?}",
                r.err()
            ));
            return -1;
        }
        r.unwrap()
    };

    let vk = {
        let r = VerifyingKey::<G1Affine>::read::<&[u8], MainCircuit<Fr>>(
            &mut vk_bytes.as_slice(),
            halo2_proofs::SerdeFormat::RawBytes,
        );
        if r.is_err() {
            debug(format!("Error on VerifyingKey::read: {:?}", r.err()));
            return -1;
        };
        r.unwrap()
    };

    // Prepare instances
    let mut verifier_transcript =
        Blake2bRead::<_, G1Affine, Challenge255<_>>::init(proof_buffer.as_slice());
    let strategy = SingleStrategy::new(&verifier_params);
    let res = verify_proof::<
        KZGCommitmentScheme<Bn256>,
        VerifierSHPLONK<'_, Bn256>,
        Challenge255<G1Affine>,
        Blake2bRead<&[u8], G1Affine, Challenge255<G1Affine>>,
        SingleStrategy<'_, Bn256>,
    >(
        &verifier_params,
        &vk,
        strategy,
        &[],
        &mut verifier_transcript,
    );
    if res.is_err() {
        debug(format!("Error on verify_proof: {:?}", res.err()));
        return -2;
    };
    debug(format!("Verifying successfully"));
    0
}
